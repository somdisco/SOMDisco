% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/somobj_doc.R
\name{SOM}
\alias{SOM}
\title{The SOM Object Class}
\description{
The SOM Object Class
}
\section{Fields}{

\describe{
\item{\code{age}}{The current age of the SOM (the number of training steps that have been performed thus far).}

\item{\code{alpha}}{The strength of the prototype update, as set in the LRAS, given the current age of the SOM.}

\item{\code{beta}}{The strength of the win frequency update, as set in the LRAS, given the current age of the SOM.}

\item{\code{bias}}{Vector of CSOM biases for each prototype.}

\item{\code{BMU}}{Matrix of BMUs (the best matching prototype indices) for each training data vector. nrow = nX, ncol = nBMU.}

\item{\code{CADJ}}{The Cumulative Adjacency Matrix of SOM prototypes.}

\item{\code{ctab}}{The color table which maps unique labels found in \code{X_label} to colors. Must be a data frame with columns 'label' and 'color'.}

\item{\code{d}}{The training data (and prototype) dimension}

\item{\code{Entropy}}{The normalized entropy of the learned SOM quantization}

\item{\code{eta}}{Vector of coefficients applied to cooperate lattice neighbor updates during training. 
The elements of eta exhibit logistic decay as lattice distance between neurons increases 
(and cease to effect any prototype updates for neurons beyond distance \code{sigma} from a BMU).}

\item{\code{fences}}{A dataframe storing the information required to visualize the U-Matrix fences on the SOM lattice.}

\item{\code{gamma}}{The strength of the win frequencies on the prototype biases, as set in the LRAS, given the current age of the SOM.}

\item{\code{is_netrng_set}}{Flag indicating whether \code{set_netrng} has been called.}

\item{\code{is_protos_init}}{Flag indicating whether \code{set_W_runif} or \code{set_W} has been called.}

\item{\code{is_recalled}}{Flag indicating whether \code{recall_SOM} has been called since last call to \code{train_SOM}.}

\item{\code{is_trained}}{Flag indicating whether \code{train_SOM} has been called since prototypes have been initialized.}

\item{\code{is_winfrq_init}}{Flag indicating whether \code{set_p_equal} or \code{set_p} has been called.}

\item{\code{lattice_type}}{String defining the SOM lattice topology, either "hex" or "grid".}

\item{\code{LRAS}}{The Learning Rate Annealing Schedule, as a data frame with columns \code{t}, \code{alpha}, \code{beta}, \code{gamma}, \code{sigma}. See \link{default_LRAS} for an example.}

\item{\code{mtr_age}}{A vector of SOM ages at which monitoring snapshots were taken during training.}

\item{\code{mtr_Entropy}}{A vector of SOM (normailized) entropies at the monitoring snapshots.}

\item{\code{mtr_freq}}{The incremental number of steps at which monitoring snapshots are taken during training. Set = 0 to disable monitoring.}

\item{\code{mtr_QSI}}{A vector of the Quantization Stability Indices computed at each monitoring snapshot. 
QSI is the proportion of data vectors whose BMUs have changed since the last monitoring snapshot was taken.}

\item{\code{mtr_RMSQE}}{A matrix of Root Mean Square Quantization Errors at the prototype level (columns) at each monitoring snapshot (rows). 
This matrix has \code{nW+1} columns, were the last contains the global RMSQE (average over all prototype-level RMSQEs).}

\item{\code{nBMU}}{The number of BMUs recorded during \code{recall_SOM}. The first BMU for a training data vector is its closest SOM prototype, the 2nd BMU is the next-closest prototype, etc.}

\item{\code{netrng_ext_max}}{The max of the training data range, used for network scaling.}

\item{\code{netrng_ext_min}}{The min of the training data range, used for network scaling.}

\item{\code{netrng_ext_rng}}{The entire range (max - min) of the external data range.}

\item{\code{netrng_int_max}}{The max of the internal (network) range, used for network scaling.}

\item{\code{netrng_int_min}}{The min of the internal (network) range, used for network scaling.}

\item{\code{netrng_int_rng}}{The entire range (max - min) of the internal range.}

\item{\code{nu_ADJ}}{Adjacency matrix of lattice neurons, as dictated by the \code{lattice_type}.}

\item{\code{nu_ij}}{Matrix of \code{(i=row,j=col)} coordinates of neurons on the SOM lattice.}

\item{\code{nu_nhblist}}{A list of list describing shortest-path neuron distances according to the SOM lattice topology set in \code{lattice_type}. 
\code{nu_nhblist[[i]][[j]]} contains all neuron indices that are lattice distance \code{j} from neuron \code{i}.}

\item{\code{nu_verts}}{Cube whose slices contain the \code{(x,y)} coordinates of each lattice tile.}

\item{\code{nu_xy}}{Matrix of \code{(x,y)} coordinates of neurons on the SOM lattice, primarily used for visualizations.}

\item{\code{nW}}{Number of SOM prototypes (and neurons), \code{= som_x * som_y}.}

\item{\code{nX}}{Number of training data vectors (nrows of the training data matrix \code{X}).}

\item{\code{p}}{Vector of the win frequencies of each prototype, as defined in the Conscience-SOM algorithm.}

\item{\code{parallel}}{Flag indicating whether computations should be performed in parallel, using the RcppParallel package.}

\item{\code{RF_label}}{Character vector of prototype labels, derived from the labels of training data mapped to each prototype. Only valid if the training data possesses labels.}

\item{\code{RF_members}}{A list of training data indices mapped to each prototype during \code{recall_SOM}.}

\item{\code{RF_size}}{A vector storing the sizes of each prototype's Receptive Field (the number of training vectors mapped to each prototype during \code{recall_SOM}).}

\item{\code{sigma}}{The maximum lattice distance between a BMU and its lattice neighborhood to which cooperative SOM prototype updates are applied.}

\item{\code{som_x}}{Width of SOM lattice, in neurons}

\item{\code{som_y}}{Height of SOM lattice, in neurons}

\item{\code{SQE}}{Vector of the Squared Quantization Error resulting from quantizing each training vector by its BMU (length = \code{nW}).}

\item{\code{train_order}}{Vector of indices of training vectors recording the order in which data were drawn to be presented to the network during training.}

\item{\code{user_train_order}}{Flag indicating whether a user-specified training order has been set prior to training.}

\item{\code{W}}{The prototype matrix (nrow = \code{nW}, ncol = \code{d}) storing SOM prototypes in its rows. 
The rows are in neuron order, so row1 corresponds to the \code{(i=1,j=1)} lattice neuron, row2 corresponds to the \code{(i=1,j=2)} lattice neuron, and so on.}

\item{\code{X_label}}{A vector (length = \code{nX}) containing character labels of each training observation.}

\item{\code{X_stats}}{A vector storing simple statistics (min, max, value of 1st element, value of last element) of the entire training data \code{X} that was specified 
during \code{initialize_SOM}. Subsequent methods which require the training data matrix (both \code{train_SOM} and \code{recall_SOM}) check 
that their inputs match those computed and stored in \code{X_stats} to ensure the same training data is given to all SOM functions.}

\item{\code{vis_par}}{Stores the \code{par()} settings for base R graphics required to layer the \code{vis_som_*} functions atop each other. 
Usually this field is not needed by the user.}

\item{\code{vis_tile_bg}}{Stores the current coloring of the lattice tiles, which sets the text annotation color if requested as "auto". 
Usually this field is not needed by the user.}

\item{\code{vis_xlim}}{Stores the \code{xlim} of the SOM plotting window 
Usually this field is not needed by the user.}

\item{\code{vis_ylim}}{Stores the \code{ylim} of the SOM plotting window. 
Usually this field is not needed by the user.}
}}

\section{Methods}{

Each class method has its own documentation, accessible via \code{?SOMDisco::<method_name>}. 
For completeness, the list is repeated here in entirety.  Additional functionality 
for visualizing a trained SOM object is available through the \code{vis_som_*} functions. 
See their documentation for more information. 

\describe{
\item{\code{calc_eta}}{Calculate the coefficients governing cooperative updates of the lattice neighbors of a BMU.}
\item{\code{CONN}}{The symmetric Cumulative Adjacency Matrix of SOM prototypes.}
\item{\code{calc_Entropy}}{Compute the normalized entropy of the SOM quantization.}
\item{\code{get_LRAS}}{Get the Learning Rate Annealing Schedule.}
\item{\code{initialize_SOM}}{Setup a SOM object for training.}
\item{\code{new}}{Instantiate a new SOM object.}
\item{\code{map_from_netrng}}{Scale the rows of a matrix from the internal network range, to the external network range.}
\item{\code{map_to_netrng}}{Scale the rows of a matrix from the external network range, to the internal network range.}
\item{\code{recall_SOM}}{Recall a trained SOM object.}
\item{\code{set_ctab}}{Set the color table mapping unique data labels to colors.}
\item{\code{set_lattice}}{Set the SOM lattice quantities.}
\item{\code{set_lattice_fences}}{Compute and store the information needed to visualize U-Matrix fences on the SOM lattice.}
\item{\code{set_LRAS}}{Set the Learning Rate Annealing Schedule.}
\item{\code{set_monitoring_freq}}{(De-)Activate monitoring of SOM training.}
\item{\code{set_nBMU}}{Set the number of BMUs recorded during \code{recall_SOM}.}
\item{\code{set_netrng}}{Set the ranges used for linear network scaling.}
\item{\code{set_p}}{Set the CSOM win frequencies to user-specified values.}
\item{\code{set_p_equal}}{Set the CSOM win frequencies to the equiprobable value 1/\code{nW}.}
\item{\code{set_parallel}}{Set the parallel computation flag.}
\item{\code{set_RF_label}}{Set the prototype label based on labeled training data.}
\item{\code{set_train_order}}{Set the order in which training data are presented to the network in \code{train_SOM}.}
\item{\code{set_W}}{Set the SOM prototypes to user-specified values.}
\item{\code{set_W_runif}}{Initialize the SOM prototypes to uniform random values.}
\item{\code{set_X_label}}{Set the training data labels.}
\item{\code{tile_interior_point}}{Get a list of interior points within each SOM lattice tile. Useful mostly for visualization routines.}
\item{\code{train_SOM}}{Train the SOM object.}
\item{\code{update_learning_rates}}{Update the learning rates based on the current SOM age.}
\item{\code{update_p}}{Update the CSOM win frequencies during training.}
\item{\code{update_W}}{Update the prototypes during training.}

\item{\code{save}}{Save a trained SOM object to disk.}
\item{\code{load}}{Load a saved SOM object from disk into a current R environment.}
\item{\code{as_list}}{Convert and return all fields of a SOM object to an R list.}
\item{\code{load_list}}{Populate an instance of a SOM object from an R list.}
}
}

