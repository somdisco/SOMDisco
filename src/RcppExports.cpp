// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/SOMDisco_types.hpp"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// distmat
arma::mat distmat(const arma::mat& X1, const arma::mat& X2, std::string which_dist, bool parallel, Rcpp::Nullable<Rcpp::NumericVector> bias, Rcpp::Nullable<Rcpp::NumericVector> X1min, Rcpp::Nullable<Rcpp::NumericVector> X1max, Rcpp::Nullable<Rcpp::NumericVector> X2min, Rcpp::Nullable<Rcpp::NumericVector> X2max);
RcppExport SEXP _SOMDisco_distmat(SEXP X1SEXP, SEXP X2SEXP, SEXP which_distSEXP, SEXP parallelSEXP, SEXP biasSEXP, SEXP X1minSEXP, SEXP X1maxSEXP, SEXP X2minSEXP, SEXP X2maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< std::string >::type which_dist(which_distSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type X1min(X1minSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type X1max(X1maxSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type X2min(X2minSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type X2max(X2maxSEXP);
    rcpp_result_gen = Rcpp::wrap(distmat(X1, X2, which_dist, parallel, bias, X1min, X1max, X2min, X2max));
    return rcpp_result_gen;
END_RCPP
}
// geodesicdist
arma::umat geodesicdist(const arma::umat& ADJ, bool weighted, bool directed);
RcppExport SEXP _SOMDisco_geodesicdist(SEXP ADJSEXP, SEXP weightedSEXP, SEXP directedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type ADJ(ADJSEXP);
    Rcpp::traits::input_parameter< bool >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< bool >::type directed(directedSEXP);
    rcpp_result_gen = Rcpp::wrap(geodesicdist(ADJ, weighted, directed));
    return rcpp_result_gen;
END_RCPP
}
// find_BMU
Rcpp::List find_BMU(const arma::mat& X, const arma::mat& W, unsigned int nBMU, bool parallel, Rcpp::Nullable<Rcpp::NumericVector> bias, Rcpp::Nullable<Rcpp::NumericVector> Xmin, Rcpp::Nullable<Rcpp::NumericVector> Xmax, Rcpp::Nullable<Rcpp::NumericVector> Wmin, Rcpp::Nullable<Rcpp::NumericVector> Wmax);
RcppExport SEXP _SOMDisco_find_BMU(SEXP XSEXP, SEXP WSEXP, SEXP nBMUSEXP, SEXP parallelSEXP, SEXP biasSEXP, SEXP XminSEXP, SEXP XmaxSEXP, SEXP WminSEXP, SEXP WmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nBMU(nBMUSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type Xmin(XminSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type Xmax(XmaxSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type Wmin(WminSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type Wmax(WmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(find_BMU(X, W, nBMU, parallel, bias, Xmin, Xmax, Wmin, Wmax));
    return rcpp_result_gen;
END_RCPP
}
// build_CADJ
arma::umat build_CADJ(const arma::umat& BMU, unsigned int nW, bool parallel);
RcppExport SEXP _SOMDisco_build_CADJ(SEXP BMUSEXP, SEXP nWSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type BMU(BMUSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nW(nWSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(build_CADJ(BMU, nW, parallel));
    return rcpp_result_gen;
END_RCPP
}
// find_RF_members
std::vector<arma::uvec> find_RF_members(const arma::umat& BMU, unsigned int nW, bool parallel);
RcppExport SEXP _SOMDisco_find_RF_members(SEXP BMUSEXP, SEXP nWSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type BMU(BMUSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nW(nWSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(find_RF_members(BMU, nW, parallel));
    return rcpp_result_gen;
END_RCPP
}
// find_RF_label
Rcpp::CharacterVector find_RF_label(const Rcpp::CharacterVector& X_label, const std::vector<arma::uvec>& RF_members, bool parallel);
RcppExport SEXP _SOMDisco_find_RF_label(SEXP X_labelSEXP, SEXP RF_membersSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type X_label(X_labelSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::uvec>& >::type RF_members(RF_membersSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(find_RF_label(X_label, RF_members, parallel));
    return rcpp_result_gen;
END_RCPP
}
// summarystat_RF_fwdmap
arma::mat summarystat_RF_fwdmap(const arma::mat& X_vals, const arma::uvec& fwdmap, unsigned int nW, std::string stat, bool parallel);
RcppExport SEXP _SOMDisco_summarystat_RF_fwdmap(SEXP X_valsSEXP, SEXP fwdmapSEXP, SEXP nWSEXP, SEXP statSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_vals(X_valsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type fwdmap(fwdmapSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nW(nWSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(summarystat_RF_fwdmap(X_vals, fwdmap, nW, stat, parallel));
    return rcpp_result_gen;
END_RCPP
}
// summarystat_RF_revmap
arma::mat summarystat_RF_revmap(const arma::mat& X_vals, const std::vector<arma::uvec>& revmap, std::string stat, bool parallel);
RcppExport SEXP _SOMDisco_summarystat_RF_revmap(SEXP X_valsSEXP, SEXP revmapSEXP, SEXP statSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_vals(X_valsSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::uvec>& >::type revmap(revmapSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(summarystat_RF_revmap(X_vals, revmap, stat, parallel));
    return rcpp_result_gen;
END_RCPP
}
// calc_SOM_fences
Rcpp::DataFrame calc_SOM_fences(const arma::mat& nu_xy, const arma::mat& W, const arma::cube& nu_verts, const arma::umat& nu_ADJ, bool parallel);
RcppExport SEXP _SOMDisco_calc_SOM_fences(SEXP nu_xySEXP, SEXP WSEXP, SEXP nu_vertsSEXP, SEXP nu_ADJSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type nu_xy(nu_xySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type nu_verts(nu_vertsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type nu_ADJ(nu_ADJSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_SOM_fences(nu_xy, W, nu_verts, nu_ADJ, parallel));
    return rcpp_result_gen;
END_RCPP
}
// linscale
arma::mat linscale(const arma::mat& X, const arma::rowvec& from_min, const arma::rowvec& from_max, const arma::rowvec& to_min, const arma::rowvec& to_max, bool parallel);
RcppExport SEXP _SOMDisco_linscale(SEXP XSEXP, SEXP from_minSEXP, SEXP from_maxSEXP, SEXP to_minSEXP, SEXP to_maxSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type from_min(from_minSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type from_max(from_maxSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type to_min(to_minSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type to_max(to_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(linscale(X, from_min, from_max, to_min, to_max, parallel));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_som_module();

static const R_CallMethodDef CallEntries[] = {
    {"_SOMDisco_distmat", (DL_FUNC) &_SOMDisco_distmat, 9},
    {"_SOMDisco_geodesicdist", (DL_FUNC) &_SOMDisco_geodesicdist, 3},
    {"_SOMDisco_find_BMU", (DL_FUNC) &_SOMDisco_find_BMU, 9},
    {"_SOMDisco_build_CADJ", (DL_FUNC) &_SOMDisco_build_CADJ, 3},
    {"_SOMDisco_find_RF_members", (DL_FUNC) &_SOMDisco_find_RF_members, 3},
    {"_SOMDisco_find_RF_label", (DL_FUNC) &_SOMDisco_find_RF_label, 3},
    {"_SOMDisco_summarystat_RF_fwdmap", (DL_FUNC) &_SOMDisco_summarystat_RF_fwdmap, 5},
    {"_SOMDisco_summarystat_RF_revmap", (DL_FUNC) &_SOMDisco_summarystat_RF_revmap, 4},
    {"_SOMDisco_calc_SOM_fences", (DL_FUNC) &_SOMDisco_calc_SOM_fences, 5},
    {"_SOMDisco_linscale", (DL_FUNC) &_SOMDisco_linscale, 6},
    {"_rcpp_module_boot_som_module", (DL_FUNC) &_rcpp_module_boot_som_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SOMDisco(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
